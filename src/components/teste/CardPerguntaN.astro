---
import { type T } from "../../i18n/utils";
import { getCustomCourses } from "../../services/cursomCourses";
import { getQuestions, type QuestionId } from "../../services/questions";

interface Props {
	t: T;
	n: QuestionId | string;
}

const { t, n } = Astro.props;

const questions = getQuestions(t);
const customCourses = await getCustomCourses()
const [courseLang, courseId, courseQuestionIndex] = (typeof n === "string") ? n.split("-") : [];
const course = courseLang ? customCourses.find(x => x.id === `${courseLang}-${courseId}`) : null;
const pergunta = courseQuestionIndex ? course?.data.perguntas[+courseQuestionIndex - 1] : null

const area = Number.isInteger(+n) ? questions[+n - 1].area : pergunta ? `${pergunta.categoria}.${pergunta.subcategoria}` : null;
const id = Number.isInteger(+n) ? questions[+n - 1].id : pergunta ? pergunta.id : null;

if (!area || !id) throw new Error("Invalid page data.");
console.log({area, id})
const title = t(`testtool.question.${area}.section_title`)
const description = Number.isInteger(+n) ? questions[+n - 1].description : pergunta ? t(`testtool.custom_course.${course?.data.idiomaI18nId}.question.${area}.${pergunta.perguntaI18nId}.description`) : null;
---

<div id="data" data-area={area} data-id={id} data-course-id={course?.id} data-course-data={JSON.stringify(course?.data)}>
</div>
<div class="text-content marginbot">
	<h3>
		{t("testtool.question_n.title")}<span
			class={course ? "" : "skeleton"}
			style="width: 100px">{course ? t(`language.list.${courseLang}`) : "[loading]"}</span
		>?
	</h3>
	<p class="section-title">{title}</p>
	<p>{description}</p>
</div>
<div class="button-group">
	<a class="btn btn-success disabled" data-continue="S" href="#">
		{t("testtool.question_n.yes_button")}
	</a>
	<a class="btn btn-warning disabled" data-continue="N" href="#">
		{t("testtool.question_n.not_yet_button")}
	</a>
</div>
<script>
	import { shuffle, type Path } from "../../utils";
	import {
		getLangFromUrl,
		getLangUrl,
		useTranslations,
	} from "../../i18n/utils";
	import {
		buildQuestionsPath,
		buildCoursePath,
		getPathHistory,
		setPathHistory,
		type Question,
		type AreasType,
		type LangCodeToEvaluate,
	} from "../../services/questions";

	const dataTag = document.getElementById("data") as HTMLDivElement;
	if (!dataTag) throw new Error("Data tag not found");
	const { area, id, courseId, courseData } = dataTag.dataset as { area: AreasType; id: unknown; courseId: string | null; courseData: string | null };

	if (!area || !id) throw new Error("Invalid page data.");

	const lang = getLangFromUrl(new URL(window.location.href));
	const t = useTranslations(lang);
	const parentPathname = '/'+[
		...getLangUrl(window.location.pathname, lang).split("/").slice(0, -1),
	].join("/");

	const langElem = document.querySelector("h3 span") as HTMLSpanElement;
	if (!langElem) throw new Error("Name element not found.");

	const langChoosenStr = sessionStorage.getItem("langChoosen");
	if (!langChoosenStr) throw new Error("No language was choosen."); // TODO: redirect instead
	const langChoosen = JSON.parse(langChoosenStr) as {
		code?: LangCodeToEvaluate;
		name?: string;
	};
	if (!langChoosen.code && !langChoosen.name)
		throw new Error("Invalid choosen language.");
	const langName = langChoosen.code
		? t(`language.list.${langChoosen.code}`)
		: langChoosen.name || "";
	if (!langName) throw new Error("Invalid choosen language.");
	langElem.innerText = langName;
	langElem.classList.remove("skeleton");

	const pathHistory = getPathHistory();

	const questionsPath = courseData ? (await buildCoursePath(courseData, t)) : buildQuestionsPath(t);
	console.log(questionsPath);

	function recurPathLookup(path: Path<Question>[]) {
		for (const entry of path) {
			if (entry.pergunta.area === area && entry.pergunta.id === +id!)
				continue;
			const { pergunta } = entry;
			const historyEntry = pathHistory.find(
				(h) => h.area === pergunta.area && h.id === pergunta.id,
			);
			if (historyEntry) {
				if (historyEntry.resposta === "N")
					return recurPathLookup(entry.caminhosNao);
				else return recurPathLookup(entry.caminhosSim);
			}
			return entry;
		}
	}

	const nextPathOptions = questionsPath
		.map(({ path }) => recurPathLookup(path))
		.filter((x) => !!x);

	const nextPage = nextPathOptions.length
		? ['pergunta', courseId, shuffle(nextPathOptions).at(0)?.pergunta.id].filter(Boolean).join("-")
		: "fim-perguntas";

	const btns = document.querySelectorAll(
		"a[data-continue]",
	) as NodeListOf<HTMLAnchorElement>;
	btns.forEach((btn) => {
		btn.href = `${parentPathname}/${nextPage}`;
		btn.classList.remove("disabled");
		btn.addEventListener("click", (evt) => {
			evt.preventDefault();
			const elem = evt.target as HTMLAnchorElement;
			const { continue: cont } = elem.dataset;

			pathHistory.push({ area, id: +id, resposta: cont as "S" | "N" });
			setPathHistory(pathHistory);
			window.location.replace(elem.href);
		});
	});
</script>

<style>
	.text-content {
		flex: 1;
		padding-right: 20px;
	}

	.section-title {
		font-size: 16px;
		font-weight: bold;
	}

	.button-group {
		display: flex;
		justify-content: center;
		gap: 5px;
		margin-top: 20px;
	}

	.btn {
		padding: 10px 20px;
		font-size: 16px;
		cursor: pointer;
		text-decoration: none;
	}
	.btn.disabled {
		pointer-events: none;
		cursor: default;
		filter: saturate(0);
	}

	.btn-success {
		background-color: #28a745;
		color: #fff;
		border: none;
	}

	.btn-warning {
		background-color: #ffc107;
		color: #fff;
		border: none;
	}

	.btn-success:hover {
		background-color: #218838;
	}

	.btn-warning:hover {
		background-color: #e0a800;
	}

	@media (max-width: 768px) {
		.text-content,
		.image-content {
			flex: 100%;
			padding-right: 0;
		}
	}
</style>
