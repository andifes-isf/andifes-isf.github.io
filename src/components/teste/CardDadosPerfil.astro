---
import type { Lang } from "../../i18n/ui";
import { getLangUrl, type T } from "../../i18n/utils";

interface Props {
	t: T;
	lang: Lang;
}

const { t, lang } = Astro.props;

const parentPath = getLangUrl(Astro.url.pathname, lang).split("/").slice(0, -1);
const resultadoUrl = '/'+[...parentPath, "resultado"].join("/");
---

<div class="text-content">
	<h3>{t("testtool.profile_data.title")}</h3>
	<p>{t("testtool.profile_data.description")}</p>
</div>
<div class="form-content">
	<form id="profileForm" action="#">
		<div class="form-group">
			<label for="name">{t("testtool.profile_data.name")}</label>
			<input
				type="text"
				class="form-control"
				name="name"
				placeholder={t("testtool.profile_data.name")}
				autocomplete="name"
				required
			/>
		</div>

		<div class="form-group">
			<label for="country">{t("testtool.profile_data.country")}</label>
			<input
				type="text"
				class="form-control"
				name="country"
				placeholder={t("testtool.profile_data.country")}
				autocomplete="country-name"
				required
			/>
		</div>

		<div class="form-group">
			<label for="age">{t("testtool.profile_data.age")}</label>
			<input
				type="number"
				class="form-control"
				name="age"
				placeholder={t("testtool.profile_data.age")}
				autocomplete="age"
				min="5"
				max="150"
				required
			/>
		</div>
	</form>
</div>

<div class="button-group">
	<a href={resultadoUrl} class="btn btn-success" id="show-results-link">
		{t("testtool.profile_data.see_results")}
	</a>
</div>

<script>
	const formElem = document.getElementById("profileForm") as HTMLFormElement;
	if (!formElem) throw new Error("Profile form not found.");

	const linkElem = document.getElementById(
		"show-results-link",
	) as HTMLAnchorElement;
	if (!linkElem) throw new Error("Link element not found.");

	formElem.addEventListener("submit", (evt) => {
		evt.preventDefault();
		linkElem.click();
	});

	linkElem.addEventListener("click", (evt) => {
		evt.preventDefault();
		const elem = evt.target as HTMLAnchorElement;

		if (!formElem.checkValidity()) {
			formElem.reportValidity();
			return;
		}

		const data = new FormData(formElem);
		const name = data.get("name");
		const country = data.get("country");
		const age = data.get("age");

		if (!name || !country || !age) throw new Error("Invalid form data.");

		sessionStorage.setItem(
			"profile",
			JSON.stringify({ name, country, age: +age }),
		);

		window.location.replace(elem.href);
	});
</script>

<style>
	.form-container {
		display: flex;
		justify-content: space-between;
		flex-wrap: wrap;
	}

	.form-content {
		flex: 0 1 60%;
	}

	.form-group {
		margin-bottom: 20px;
	}

	.form-control {
		box-sizing: border-box;
		display: block;
		width: 250px;
		padding: 10px;
		font-size: 16px;
		border-radius: 4px;
		border: 1px solid #ccc;
	}

	.btn {
		display: inline-block;
		padding: 10px 20px;
		font-size: 16px;
		text-align: center;
		text-decoration: none;
		color: #fff;
		background-color: #28a745;
		border-radius: 4px;
		transition: background-color 0.3s ease;
	}

	.btn:hover {
		background-color: #218838;
	}

	.button-group {
		display: flex;
		justify-content: center;
		gap: 5px;
		margin-top: 20px;
	}

	@media (max-width: 768px) {
		.form-content {
			flex: 1 100%;
			padding-right: 0;
		}
	}
</style>
