---
import type { T } from "../../i18n/utils";
import { getCustomCourses } from "../../services/cursomCourses";

interface Props {
	t: T;
}

const { t } = Astro.props;

const customCoursesData = await getCustomCourses().then(entries => {
	return entries.reduce((prev, cur) => ({ ...prev, [cur.id]: {
		title: t(`testtool.custom_course.${cur.data.idiomaI18nId}.${cur.data.cursoI18nId}.title`),
		questionCount: cur.data.perguntas.length,
 	}}), {});
})
---

<div class="text-content">
	<p>{t("testtool.start_questions.intro")}</p>
	<p>
		<span class="highlight"
			>{t("testtool.start_questions.question_range")}</span
		>
	</p>
	<p>{t("testtool.start_questions.description")}</p>
</div>
<div class="button-group">
	<a class="btn btn-danger" id="continue_button" href="#">
		{t("testtool.start_questions.continue_button")}
	</a>
</div>

<script id="custom-courses-data" type="application/json" set:html={JSON.stringify({ customCoursesData })}></script>

<script>
	import {
		getLangFromUrl,
		getLangUrl,
		useTranslations,
	} from "../../i18n/utils";
	import { buildQuestionsPath } from "../../services/questions";
	import { shuffle } from "../../utils";

	const lang = getLangFromUrl(new URL(window.location.href));
	const t = useTranslations(lang);
	const parentPathname = '/'+[
		...getLangUrl(window.location.pathname, lang).split("/").slice(0, -1),
	].join("/");

	const customCourse = sessionStorage.getItem("curso");
	const data = JSON.parse(document.getElementById("custom-courses-data").textContent);
	if (customCourse && data.customCoursesData[customCourse]) {
		const highlight = document.querySelector(".text-content .highlight")
		if (!highlight) throw new Error("Highlight element not found.");
		highlight.innerHTML = data.customCoursesData[customCourse].questionCount + " " + t("testtool.start_questions.question_range").split(" ").pop();

		const description = document.querySelector(".text-content p:last-child")
		if (!description) throw new Error("Description element not found.");
		description.innerHTML = t("testtool.custom_course.start_questions.description") + data.customCoursesData[customCourse].title;

		const btn = document.getElementById("continue_button") as HTMLAnchorElement;
		if (!btn) throw new Error("Link element not found.");
		btn.href = `${parentPathname}/pergunta-${customCourse}-1`; // TODO

		sessionStorage.removeItem("path-history");
	} else {
		const questionsPath = buildQuestionsPath(t);

		const firstArea = shuffle(questionsPath).at(0);
		if (!firstArea) throw new Error("Invalid path.");

		const question =
			firstArea.path.length > 1
				? shuffle(firstArea.path).at(0)
				: firstArea.path.at(0);
		if (!question) throw new Error("Invalid path.");

		const btn = document.getElementById("continue_button") as HTMLAnchorElement;
		if (!btn) throw new Error("Link element not found.");

		btn.href = `${parentPathname}/pergunta-${question.pergunta.id}`;

		sessionStorage.removeItem("path-history");
	}
</script>

<style>
	.text-content {
		flex: 1;
		padding-right: 20px;
	}

	.highlight {
		font-size: 26px;
		font-weight: bold;
		color: #666666;
	}

	.button-group {
		display: flex;
		justify-content: center;
		gap: 5px;
		margin-top: 20px;
	}

	.btn {
		background-color: #dc3545;
		color: #fff;
		border: none;
		padding: 10px 20px;
		font-size: 16px;
		cursor: pointer;
		text-decoration: none;
	}

	.btn:hover {
		background-color: #c82333;
	}

	@media (max-width: 768px) {
		.text-content,
		.image-content {
			flex: 100%;
			padding-right: 0;
		}
	}
</style>
