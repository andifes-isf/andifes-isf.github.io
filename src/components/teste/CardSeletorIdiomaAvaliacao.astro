---
import type { Lang } from "../../i18n/ui";
import { getLangUrl, type T } from "../../i18n/utils";
import { defaultLanguagesToEvaluate } from "../../services/questions";

interface Props {
	t: T;
	lang: Lang;
}

const { t, lang } = Astro.props;
const languages = defaultLanguagesToEvaluate.map((lang) => ({
	code: lang,
	name: t(`language.list.${lang}`),
}));
const parentPath = getLangUrl(Astro.url.pathname, lang).split("/").slice(0, -1);
const inicioPerguntasUrl = '/'+[...parentPath, "inicio-perguntas"].join("/");
---

<div class="text-content">
	<h3>{t("testtool.language_selection.title")}</h3>
	<div id="results" class="language-list">
		<div class="languages-container">
			{
				languages.map((lang) => (
					<label>
						<input
							type="radio"
							name="lng"
							value={lang.code}
							required
						/>{" "}
						{lang.name}
					</label>
				))
			}
		</div>
	</div>
</div>

<div class="form-group">
	<label for="newlng"
		>{t("testtool.language_selection.choose_different")}</label
	>
	<input type="text" class="form-control" id="newlng" />
</div>
<div class="button-group">
	<a class="btn btn-danger" id="continue_button" href={inicioPerguntasUrl}>
		{t("testtool.language_selection.start_button")}
	</a>
</div>

<script>
	const langInputs = document.querySelectorAll(
		"[name=lng]",
	) as NodeListOf<HTMLInputElement>;
	if (!langInputs.length)
		throw new Error("No pre-defined language options found.");

	const customLangInput = document.querySelector(
		"#newlng",
	) as HTMLInputElement;
	if (!customLangInput)
		throw new Error("Input field for custom language not found.");

	const btn = document.getElementById("continue_button") as HTMLAnchorElement;
	if (!btn) throw new Error("Link element not found.");

	langInputs.forEach((i) =>
		i.addEventListener("change", () => {
			customLangInput.value = "";
		}),
	);

	customLangInput.addEventListener("change", () => {
		langInputs.forEach((i) => (i.checked = false));
		console.log(langInputs.length);
	});
	console.log(customLangInput);

	btn.addEventListener("click", (evt) => {
		evt.preventDefault();
		const elem = evt.target as HTMLAnchorElement;

		const langSelectedInput = document.querySelector(
			"[name=lng]:checked",
		) as HTMLInputElement;

		if (langSelectedInput) {
			const langCodeChoosen = langSelectedInput.value;
			sessionStorage.setItem(
				"langChoosen",
				JSON.stringify({ code: langCodeChoosen }),
			);
		} else {
			if (!customLangInput.value) {
				langInputs[0].reportValidity();
				return;
			}
			const langNameChoosen = customLangInput.value;
			sessionStorage.setItem(
				"langChoosen",
				JSON.stringify({ name: langNameChoosen }),
			);
		}

		window.location.replace(elem.href);
	});
</script>

<style>
	.text-content {
		flex: 1;
		padding-right: 20px;
	}

	.languages-container {
		display: flex;
		flex-wrap: wrap;
	}

	.languages-container label {
		flex: 0 0 140px;
		margin: 5px;
		background-color: #0001;
		transition: all 0.4s;
		cursor: pointer;
	}
	.languages-container label:hover {
		background-color: #0002;
	}

	.form-group {
		margin: 20px 0;
	}
	.form-group label {
		font-size: 16px;
	}
	.form-group input {
		display: block;
		box-sizing: border-box;
		width: 400px;
		height: 34px;
		padding: 6px 12px;
		font-size: 14px;
		line-height: 1.42857143;
		color: #555;
		background-color: #fff;
		background-image: none;
		border: 1px solid #ccc;
		border-radius: 4px;
		-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
		box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
	}
	.button-group {
		display: flex;
		justify-content: center;
		gap: 5px;
		margin-top: 20px;
	}

	.btn {
		display: inline-block;
		background-color: #dc3545;
		color: #fff;
		border: none;
		padding: 10px 20px;
		font-size: 16px;
		cursor: pointer;
		text-decoration: none;
	}

	.btn:hover {
		background-color: #c82333;
	}

	@media (max-width: 768px) {
		.text-content {
			flex: 100%;
			padding-right: 0;
		}

		.languages-container label {
			flex: 0 0 100%; /* Stack labels on smaller screens */
		}
	}
</style>
